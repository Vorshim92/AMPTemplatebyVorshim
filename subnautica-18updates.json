[
  {
    "UpdateStageName": "Create Nitrox config dir",
    "UpdateSourcePlatform": "Linux",
    "UpdateSource": "Executable",
    "UpdateSourceData": "/bin/bash",
    "UpdateSourceArgs": "-lc \"mkdir -p '{{$FullBaseDir}}/.config/Nitrox' && [ -f '{{$FullBaseDir}}/.config/Nitrox/server.cfg' ] || touch '{{$FullBaseDir}}/.config/Nitrox/server.cfg'\""
  },
  {
    "UpdateStageName": "Render server.cfg from AMP settings",
    "UpdateSourcePlatform": "Linux",
    "UpdateSource": "Executable",
    "UpdateSourceData": "/bin/bash",
    "UpdateSourceArgs": "-lc \"set -e; cfg='{{$FullBaseDir}}/.config/Nitrox/server.cfg'; mkdir -p '{{$FullBaseDir}}/.config/Nitrox' ; cat > \\\"$cfg\\\" << 'EOF'\n# Nitrox server.cfg (generated by AMP)\nCreateFullEntityCache={{$NitroxCreateFullEntityCache}}\nSeed={{$NitroxSeed}}\nServerPort={{$NitroxServerPort}}\nSaveInterval={{$NitroxAutoSaveSec}}000\nPostSaveCommandPath={{$NitroxPostSaveCmd}}\nMaxConnections={{$NitroxPlayerLimit}}\nInitialSyncTimeout={{$NitroxInitialSyncTimeout}}\nDisableAutoSave={{$NitroxDisableAutoSave}}\nDisableAutoBackup={{$NitroxDisableAutoBackup}}\nSaveName=My World\nServerPassword={{$NitroxPassword}}\nAdminPassword={{$NitroxAdminPassword}}\nGameMode={{$NitroxGameMode}}\nSerializerMode=JSON\nDefaultPlayerPerm={{$NitroxDefaultPerm}}\nDefaultOxygenValue={{$NitroxDefaultO2}}\nDefaultMaxOxygenValue={{$NitroxDefaultMaxO2}}\nDefaultHealthValue={{$NitroxDefaultHP}}\nDefaultHungerValue={{$NitroxDefaultHunger}}\nDefaultThirstValue={{$NitroxDefaultThirst}}\nDefaultInfectionValue={{$NitroxDefaultInfection}}\nAutoPortForward={{$NitroxAutoPortForward}}\n# Extra flags not sempre presenti nelle build\nAllowLANDiscovery={{$NitroxAllowLAN}}\nEnableCommands={{$NitroxEnableCommands}}\nEnablePvP={{$NitroxEnablePvP}}\nKeepInventory={{$NitroxKeepInventory}}\nSafeBuilding={{$NitroxSafeBuilding}}\nEOF\n\""
  },
  {
    "UpdateStageName": "Ensure base + XDG dirs (Linux)",
    "UpdateSourcePlatform": "Linux",
    "UpdateSource": "Executable",
    "UpdateSourceData": "/bin/bash",
    "UpdateSourceArgs": "-lc \"set -e; mkdir -p '{{$FullBaseDir}}/nitrox' '{{$FullBaseDir}}/dotnet' '{{$FullBaseDir}}/home' '{{$FullBaseDir}}/.config' '{{$FullBaseDir}}/.local/share' '{{$FullBaseDir}}/.cache'\""
  },
  {
    "UpdateStageName": "Download base server.cfg",
    "UpdateSourcePlatform": "Linux",
    "UpdateSource": "FetchURL",
    "UpdateSourceData": "https://raw.githubusercontent.com/Vorshim92/AMPTemplatebyVorshim/main/subnautica-18server.cfg",
    "UpdateSourceArgs": "default-server.cfg",
    "UpdateSourceTarget": "{{$FullBaseDir}}",
    "OverwriteExistingFiles": false,
    "SkipOnFailure": false
  },
  {
    "UpdateStageName": "Install server.cfg to save (if missing)",
    "UpdateSourcePlatform": "Linux",
    "UpdateSource": "Executable",
    "UpdateSourceData": "/bin/bash",
    "UpdateSourceArgs": "-lc \"set -e; BASE='{{$FullBaseDir}}'; SAVEDIR=\\\"$BASE/.config/Nitrox/saves/{{$SaveName}}\\\"; mkdir -p \\\"$SAVEDIR\\\"; if [ ! -f \\\"$SAVEDIR/server.cfg\\\" ]; then cp -n \\\"$BASE/default-server.cfg\\\" \\\"$SAVEDIR/server.cfg\\\"; fi\""
  },
  {
    "UpdateStageName": "Fetch dotnet-install.sh",
    "UpdateSourcePlatform": "Linux",
    "UpdateSource": "FetchURL",
    "UpdateSourceData": "https://dot.net/v1/dotnet-install.sh",
    "UpdateSourceTarget": "{{$FullBaseDir}}/dotnet",
    "UpdateSourceArgs": "{{$FullBaseDir}}/dotnet/dotnet-install.sh",
    "OverwriteExistingFiles": true
  },
  {
    "UpdateStageName": "Install .NET 9 runtime (user-local)",
    "UpdateSourcePlatform": "Linux",
    "UpdateSource": "Executable",
    "UpdateSourceData": "/bin/bash",
    "UpdateSourceArgs": "-lc \"chmod +x '{{$FullBaseDir}}/dotnet/dotnet-install.sh' && '{{$FullBaseDir}}/dotnet/dotnet-install.sh' --channel 9.0 --runtime dotnet --install-dir '{{$FullBaseDir}}/dotnet' --no-path\""
  },
  {
    "UpdateStageName": "Nitrox 1.8 â€“ Download+Unzip (Linux)",
    "UpdateSourcePlatform": "Linux",
    "UpdateSource": "FetchURL",
    "UpdateSourceData": "https://github.com/SubnauticaNitrox/Nitrox/releases/download/1.8.0.0/Nitrox_1.8.0.0_linux_x64.zip",
    "UpdateSourceTarget": "{{$FullBaseDir}}/nitrox",
    "UnzipUpdateSource": true,
    "DeleteAfterExtract": true,
    "OverwriteExistingFiles": true
  },
  {
    "UpdateStageName": "Make executable (robusto)",
    "UpdateSourcePlatform": "Linux",
    "UpdateSource": "Executable",
    "UpdateSourceData": "/bin/sh",
    "UpdateSourceArgs": "-lc \"p='{{$FullBaseDir}}/nitrox/linux-x64/NitroxServer-Subnautica'; [ -f \\\"$p\\\" ] && chmod +x \\\"$p\\\" || { echo 'not found'; exit 1; }\""
  },
  {
    "UpdateStageName": "Write run-nitrox.sh",
    "UpdateSourcePlatform": "Linux",
    "UpdateSource": "Executable",
    "UpdateSourceData": "/bin/bash",
    "UpdateSourceArgs": "-lc \"cat > '{{$FullBaseDir}}/run-nitrox.sh' << 'EOF'\n#!/usr/bin/env bash\nset -euo pipefail\nBASE='{{$FullBaseDir}}'\n# .NET locale\nexport DOTNET_ROOT=\"$BASE/dotnet\"\nexport PATH=\"$DOTNET_ROOT:$PATH\"\n# XDG/HOME per i config\nexport HOME=\"$BASE/home\"\nexport XDG_CONFIG_HOME=\"$BASE/.config\"\nexport XDG_DATA_HOME=\"$BASE/.local/share\"\nexport XDG_CACHE_HOME=\"$BASE/.cache\"\n# ðŸ‘‰ Path ai file di Subnautica (scaricati in $BASE/game)\nexport SUBNAUTICA_INSTALLATION_PATH=\"$BASE/game\"\n# Avvio\ncd \"$BASE/nitrox/linux-x64\"\nexec \"$BASE/nitrox/linux-x64/NitroxServer-Subnautica\" \"$@\"\nEOF\n\""
  },
  {
    "UpdateStageName": "chmod run-nitrox.sh (robusto)",
    "UpdateSourcePlatform": "Linux",
    "UpdateSource": "Executable",
    "UpdateSourceData": "/bin/sh",
    "UpdateSourceArgs": "-lc \"chmod +x '{{$FullBaseDir}}/run-nitrox.sh'\""
  },
  {
    "UpdateStageName": "Create game dir",
    "UpdateSourcePlatform": "Linux",
    "UpdateSource": "Executable",
    "UpdateSourceData": "/bin/sh",
    "UpdateSourceArgs": "-lc \"mkdir -p '{{$FullBaseDir}}/game'\""
  },
  {
    "UpdateStageName": "Download Subnautica (SteamCMD, Windows)",
    "UpdateSourcePlatform": "Linux",
    "UpdateSource": "SteamCMD",
    "UpdateSourceData": "264710",
    "UpdateSourceTarget": "{{$FullBaseDir}}/game",
    "ForceDownloadPlatform": "Windows",
    "UpdateSourceVersion": "public",
    "OneShot": true,
    "UpdateSourceConditionSetting": "UseSteamCMD",
    "UpdateSourceConditionValue": "true"
  }
]
